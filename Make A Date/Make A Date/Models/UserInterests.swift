//
//  UserInterests.swift
//  MySampleApp
//
//
// Copyright 2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.19
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSAuthCore

class UserInterests: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
    
    var _userId: String?
    var _question1: Set<String>?
    var _question2: String?
    var _question3: String?
    var _question4: String?
    var _question5: String?
    
    private static var _current = UserInterests()
    
    static var current: UserInterests {
        guard let currentInterests = _current else {
            fatalError("Error: current interest doesn't exist")
        }
        return currentInterests
    }
    
    
    class func dynamoDBTableName() -> String {

        return "makeadate-mobilehub-1183265318-UserInterests"
    }
    
    class func hashKeyAttribute() -> String {

        return "_userId"
    }
    
    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
        return [
               "_userId" : "userId",
               "_question1" : "question1",
               "_question2" : "question2",
               "_question3" : "question3",
               "_question4" : "question4",
               "_question5" : "question5",
        ]
    }
    
    class func createNewUserInterests(){
        let dynamoDbObjextMapper = AWSDynamoDBObjectMapper.default()
        let interest: UserInterests = UserInterests()
        interest._userId = AWSIdentityManager.default().identityId
        interest._question1 = current._question1!
        interest._question2 = current._question2!
        interest._question3 = current._question3!
        interest._question4 = current._question4!
        interest._question5 = current._question5!
        
        dynamoDbObjextMapper.save(interest, completionHandler:{
            (error: Error?) -> Void in
            if let error = error {
                print("Amazon DynamoDB Save Error on create new interest: \(error)")
                return
            }
            print("New Interests successfully saved to DDB")
        })
    }
    
    class func getUserInterest(){
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        dynamoDbObjectMapper.load(UserInterests.self, hashKey: AWSIdentityManager.default().identityId as Any, rangeKey:nil).continueWith { (task: AWSTask<AnyObject>!) -> Any? in
            if let error = task.error as NSError? {
                print("The request for loading UserInterest failed. Error: \(error)", task)
            } else if let gotInterest = task.result as? UserInterests {
                print("User Interests Downloaded Successfully")
                _current = gotInterest
                return nil
            }
            print("User Interests not in DB")
            return nil
        }
    }
    
    class func updateUserInterests(){
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
        let interest: UserInterests = UserInterests()
        interest._userId = AWSIdentityManager.default().identityId
        interest._question1 = current._question1!
        interest._question2 = current._question2!
        interest._question3 = current._question3!
        interest._question4 = current._question4!
        interest._question5 = current._question5!
        let updateMapperConfig = AWSDynamoDBObjectMapperConfiguration()
        updateMapperConfig.saveBehavior = .updateSkipNullAttributes
        dynamoDbObjectMapper.save(interest, configuration: updateMapperConfig, completionHandler: {(error: Error?) -> Void in
            if let error = error {
                print("Amazon DynamoDB Save Error on Interest update: \(error)")
                return
            }
            print("User Interests successfully updated!")
        })
    }
    
    class func setQuestion1(_ ans:Set<String>){
        current._question1 = ans
        print("Data collected/set for question 1....")
    }
    class func setQuestion2(_ ans:String){
        print("Data collected/set for question 2....")
        current._question2 = ans
    }
    class func setQuestion3(_ ans:String){
        print("Data collected/set for question 3....")
        current._question3 = ans
    }
    class func setQuestion4(_ ans:String){
        print("Data collected/set for question 4....")
        current._question4 = ans
    }
    class func setQuestion5(_ ans:String){
        print("Data collected/set for question 5....")
        current._question5 = ans
    }
    
    
}
